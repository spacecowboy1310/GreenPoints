@page "/map"

@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject GreenPointService GreenPointService
@inject UserService UserService

@if (addingPoint)
{
    <AddPointComponent />
}

@if (sessionChange)
{
    <LoginComponent CloseThis="CloseLogin" />
}

<input type="hidden" id="lat1"  />
<input type="hidden" id="lng1" @bind="lng1" />
<input type="hidden" id="lat2" @bind="lat2" />
<input type="hidden" id="lng2" @bind="lng2" />

<div id="map" style="width: 100vw; height: 100vh; opacity:@opacity%" @onwheel="@(() => AddAllPointsVisible(lat1, lng1, lat2, lng2))" />

<div class="wrapper @wrapperState">
    <button class="options" @onclick="Unwrap">
        <span class="oi @icon"></span>
    </button>
    <button class="session" @onclick="SessionChange">
        <span class="oi @iconSession"></span>
    </button>
    <button class="change" @onclick="RequestChange">
        <span class="oi oi-pencil"></span>
    </button>
    <button class="addMarker" @onclick="AddPointSurvey">
        <span class="oi oi-map-marker"></span>
    </button>
</div>



@code {
    private double lat1;
    private double lng1;
    private double lat2;
    private double lng2;
    private bool addingPoint = false;
    private bool sessionChange = false;
    private string opacity = "100";
    private string icon = "oi-plus";
    private string iconSession = "oi-account-login";
    private string wrapperState = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var apikey = "pk.eyJ1Ijoic3BhY2UtY293Ym95IiwiYSI6ImNsZW1yM3Z1ZTE4NGkzcW40eGdpdGNuYjcifQ.baBUxOLdUB2i7auVsvDGyQ";
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeMap", apikey);
            await JSRuntime.InvokeVoidAsync("addMarker", 43, -3);
        }
    }

    public async Task AddAllPointsVisible(double Lat1, double Lng1, double Lat2, double Lng2)
    {
        await JSRuntime.InvokeVoidAsync("removeAllMarkers");
        await GreenPointService.GetGreenPointsInArea(Lat1, Lng1, Lat2, Lng2);
        foreach (GreenPoint point in GreenPointService.GreenPoints)
        {
            await JSRuntime.InvokeVoidAsync("addMarker", point.Latitude, point.Longitude);
        }
        StateHasChanged();
    }

    private void SessionChange()
    {
        sessionChange = !sessionChange;
        addingPoint = false;

        StateHasChanged();
    }

    public void CloseLogin()
    {
        sessionChange = false;
        wrapperState = "";
        opacity = "100";
        StateHasChanged();
    }

    private void RequestChange()
    {

    }

    private void Unwrap()
    {
        if (wrapperState == "")
        {
            if (UserService.user != null)
            {
                wrapperState = "open-loged";
                iconSession = "oi-account-logout";
            }
            else
            {
                wrapperState = "open";
                iconSession = "oi-person";
            }
            opacity = "50";

        }
        else
        {
            wrapperState = "";
            opacity = "100";
            sessionChange = false;
            addingPoint = false;
        }

        StateHasChanged();
    }

    private void AddPointSurvey()
    {
        if (addingPoint)
        {
            addingPoint = false;
        }
        else
        {
            if (UserService.user == null)
            {
                addingPoint = false;
                sessionChange = false;
                //popup
                return;
            }
            addingPoint = true;
            sessionChange = false;
        }

        StateHasChanged();
    }

}