@inject HttpClient Http
@inject GreenPointService GreenPointService
@inject UserService UserService

@if(Original == null)
{
    <div class="main">
        <form onsubmit="@CreatePoint">
            <div class="card p-3">
                <div class="form-group row">
                    <label for="inputLatitud">Coordenadas</label><p>(Puede hacer clic en el mapa para añadir las coordenadas)</p>
                </div>
                <div class="form-group row">
                    <div class="form-group col-md-5">
                        <input type="text" class="form-control" id="inputLatitud" placeholder="Latitud" @bind-value="editGreenPoint.Latitude" required>
                    </div>
                    <div class="form-group col-md-5">
                        <input type="text" class="form-control" id="inputLongitud" placeholder="Longitud" @bind-value="editGreenPoint.Longitude" required>
                    </div>
                </div>
                <br />
                <div class="form-group">
                    <label for="inputAddress">Nombre del Punto Verde</label>
                    <input type="text" class="form-control" id="inputAddress" placeholder="Nombre" @bind-value="editGreenPoint.Name" required>
                </div>
                <div class="form-group row mt-2">
                    <h6>Campos extra:</h6>
                </div>
                @foreach (DescriptionProperty extra in extraFieldComponents)
                {
                    <ExtraFieldComponent DescriptionProperty="extra" Remove="RemoveExtraField" />
                }
                <div class="form-group col-md-6 mb-2">
                    <input type="button" class="btn btn-primary" value="Añadir un campo extra" onclick="@AddExtraField" />
                </div>
                <hr />
                <div class="form-group col-md-6 mb-2">
                    <input type="submit" class="btn btn-primary" value="Crear punto" />
                </div>
            </div>
        </form>
    </div>
}

@code {

    [Parameter]
    public EventCallback CloseThis { get; set; }
    [Parameter]
    public GreenPoint Original { get; set; }
    private List<DescriptionProperty> extraFieldComponents = new List<DescriptionProperty>();
    private EditGreenPoint editGreenPoint = new EditGreenPoint();

    private void AddExtraField()
    {
        DescriptionProperty descriptionProperty = new DescriptionProperty();
        descriptionProperty.Description = "";
        descriptionProperty.Name = "";
        descriptionProperty.Id = extraFieldComponents.Count; // temporary id so it can bee deleted later
        extraFieldComponents.Add(descriptionProperty);
    }

    private void RemoveExtraField(int id)
    {
        foreach (DescriptionProperty extra in extraFieldComponents)
        {
            if (extra.Id == id)
            {
                extraFieldComponents.Remove(extra);
                break;
            }
        }
    }

    private async Task CreatePoint()
    {
        User user = new User();
        user.Id = UserService.user.Id;
        foreach (DescriptionProperty extra in extraFieldComponents)
        {
            if (extra.Name != null && extra.Name != "" && extra.Description != null && extra.Description != "")
            {
                DescriptionProperty editDescriptionProperty = new DescriptionProperty
                    {
                        Name = extra.Name,
                        Description = extra.Description
                    };
                editGreenPoint.Properties.Add(editDescriptionProperty);
            }
            
        }
        editGreenPoint.Collaborator = user;
        bool ok = await GreenPointService.PostGreenPointRequest(editGreenPoint);
        if (ok)
        {
            await CloseThis.InvokeAsync();
        }
        else
        {
            //TODO: show error
        }
    }
}
